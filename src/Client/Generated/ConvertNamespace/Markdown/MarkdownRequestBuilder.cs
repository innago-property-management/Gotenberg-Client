// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.ConvertNamespace.Markdown
{
    /// <summary>
    /// Builds and executes requests for operations under \convert\markdown
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MarkdownRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.ConvertNamespace.Markdown.MarkdownRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MarkdownRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/convert/markdown", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.ConvertNamespace.Markdown.MarkdownRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MarkdownRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/convert/markdown", rawUrl)
        {
        }
        /// <summary>
        /// Send an HTML file called `index.html` as a multipart form request and embed a markdown file into the HTML file using the Golang template function `toHTML`, the API will convert the markdown and embed it into the HTML this way and render the resulting page. Markdown conversion works almost exactly the same way as HTML conversion, therefore refer to the HTML conversion page for all the options you can use when converting Markdown documents as well. You can optionally include `header.html` and `footer.html` files as part of the request as well.An example `index.html` file can be as follows:```html&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;My PDF&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    {{ toHTML .DirPath &quot;file.md&quot; }}  &lt;/body&gt;&lt;/html&gt;```Whereas your `file.md` file in the same level would be like:```md# TitleContent```The API will convert the markdown to HTML and embed it into your `index.html` file, then render the resulting page. You can include your own styling and more in your HTML file.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Send an HTML file called `index.html` as a multipart form request and embed a markdown file into the HTML file using the Golang template function `toHTML`, the API will convert the markdown and embed it into the HTML this way and render the resulting page. Markdown conversion works almost exactly the same way as HTML conversion, therefore refer to the HTML conversion page for all the options you can use when converting Markdown documents as well. You can optionally include `header.html` and `footer.html` files as part of the request as well.An example `index.html` file can be as follows:```html&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;My PDF&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    {{ toHTML .DirPath &quot;file.md&quot; }}  &lt;/body&gt;&lt;/html&gt;```Whereas your `file.md` file in the same level would be like:```md# TitleContent```The API will convert the markdown to HTML and embed it into your `index.html` file, then render the resulting page. You can include your own styling and more in your HTML file.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/pdf");
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.ConvertNamespace.Markdown.MarkdownRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ApiSdk.ConvertNamespace.Markdown.MarkdownRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ApiSdk.ConvertNamespace.Markdown.MarkdownRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MarkdownRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
