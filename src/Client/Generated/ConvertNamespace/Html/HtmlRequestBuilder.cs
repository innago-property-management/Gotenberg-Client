// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.ConvertNamespace.Html
{
    /// <summary>
    /// Builds and executes requests for operations under \convert\html
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class HtmlRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.ConvertNamespace.Html.HtmlRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HtmlRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/convert/html", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.ConvertNamespace.Html.HtmlRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HtmlRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/convert/html", rawUrl)
        {
        }
        /// <summary>
        /// Send an HTML file called `index.html` as a multipart form request, and get the resulting PDF file. You can optionally include `header.html` and `footer.html` files as part of the request as well.An example `index.html` file can be as follows:```html&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;My PDF&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Hello world!&lt;/h1&gt;  &lt;/body&gt;&lt;/html&gt;```You may also add a header and/or a footer in the resulting PDF  by sending a file named `header.html` and `footer.html` respectively. Both the header and the footer files has to be a complete HTML document. An example `footer.html` can be as follows:```html&lt;html&gt;    &lt;head&gt;        &lt;style&gt;            body {                font-size: 8rem;                margin: 4rem auto;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p&gt;            &lt;span class=&quot;pageNumber&quot;&gt;&lt;/span&gt; of &lt;span class=&quot;totalPages&quot;&gt;&lt;/span&gt;        &lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;```The following classes will allow you to inject printing values in your document:- `date`: Formatted print date.- `title`: Document title.- `pageNumber`: Current page number.- `totalPage`: Total pages in the document.There are some limitations with header and footer files:- JavaScript is not executed.- External resources are not loaded.- The CSS properties are independant of the ones used in the `index.html` file.- `footer.html` CSS properties override the ones from `header.html`.- Only fonts installed in the Docker image are loaded (see the fonts section)- Images only work using a `base64` encoded source, e.g. `&lt;img src=&quot;data:image/png;base64, iVBORw0K... /&gt;`- `background-color` and `color` CSS properties require an additional `-webkit-print-color-adjust: exact` CSS property in order to work.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Send an HTML file called `index.html` as a multipart form request, and get the resulting PDF file. You can optionally include `header.html` and `footer.html` files as part of the request as well.An example `index.html` file can be as follows:```html&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;My PDF&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Hello world!&lt;/h1&gt;  &lt;/body&gt;&lt;/html&gt;```You may also add a header and/or a footer in the resulting PDF  by sending a file named `header.html` and `footer.html` respectively. Both the header and the footer files has to be a complete HTML document. An example `footer.html` can be as follows:```html&lt;html&gt;    &lt;head&gt;        &lt;style&gt;            body {                font-size: 8rem;                margin: 4rem auto;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p&gt;            &lt;span class=&quot;pageNumber&quot;&gt;&lt;/span&gt; of &lt;span class=&quot;totalPages&quot;&gt;&lt;/span&gt;        &lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;```The following classes will allow you to inject printing values in your document:- `date`: Formatted print date.- `title`: Document title.- `pageNumber`: Current page number.- `totalPage`: Total pages in the document.There are some limitations with header and footer files:- JavaScript is not executed.- External resources are not loaded.- The CSS properties are independant of the ones used in the `index.html` file.- `footer.html` CSS properties override the ones from `header.html`.- Only fonts installed in the Docker image are loaded (see the fonts section)- Images only work using a `base64` encoded source, e.g. `&lt;img src=&quot;data:image/png;base64, iVBORw0K... /&gt;`- `background-color` and `color` CSS properties require an additional `-webkit-print-color-adjust: exact` CSS property in order to work.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/pdf");
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.ConvertNamespace.Html.HtmlRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ApiSdk.ConvertNamespace.Html.HtmlRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ApiSdk.ConvertNamespace.Html.HtmlRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class HtmlRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
