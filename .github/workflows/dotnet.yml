# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add Nuget Source
      run: |
        dotnet nuget add source --username ${{ secrets.PACKAGE_WRITE_USERNAME }} --password ${{ secrets.PACKAGE_WRITE_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/innago-property-management/index.json"
    - name: Extract Branch Name
      run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
    - name: Get Latest Tag
      run: |
        git fetch --tags
        latest_tag=$(git tag -l --sort=v:refname | tail -n 1)
        latest_tag=${latest_tag:-0.0.1}
        echo "current version is: $latest_tag"
        MAJOR=$(echo "$latest_tag" | cut -d. -f1 | sed 's/[^0-9]//g')
        MINOR=$(echo "$latest_tag" | cut -d. -f2)
        PATCH=$(echo "$latest_tag" | cut -d. -f3)
        PATCH=$((PATCH + 1))
        NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
        NEXT_VERSION=$(cat NEXT_VERSION || echo "0.0.0")
        if [[ $(echo -e "$NEW_TAG\n$NEXT_VERSION" | sort -V | head -n1) == "$NEXT_VERSION" ]]; then
          echo "NEXT_VERSION ($NEXT_VERSION) is less than NEW_TAG ($NEW_TAG)"
        else
          echo "NEXT_VERSION ($NEXT_VERSION) is greater than NEW_TAG ($NEW_TAG)"
          NEW_TAG="$NEXT_VERSION"
        fi
        echo "Next tag: $NEW_TAG"
        TAG=$(git describe --exact-match --tags || echo "")
        if [ -z "$TAG" ]; then
          BRANCH=$(git branch --show-current)
          if [ "$BRANCH" == "main" ]; then
            echo "VERSION=$NEW_TAG-rc-${{ github.run_number }}" >> $GITHUB_ENV
            echo "ASSEMBLY_VERSION=$NEW_TAG.${{ github.run_number }}" >> $GITHUB_ENV
          else
            echo "VERSION=$NEW_TAG-feat-${{ github.run_number }}" >> $GITHUB_ENV
            echo "ASSEMBLY_VERSION=$NEW_TAG.${{ github.run_number }}" >> $GITHUB_ENV
          fi
        else
          echo "VERSION=$TAG" >> $GITHUB_ENV
          echo "ASSEMBLY_VERSION=$TAG" >> $GITHUB_ENV
        fi
        echo "$VERSION $ASSEMBLY_VERSION"
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: |
        dotnet build --no-restore --configuration Release -p:Version="${{ env.VERSION }}" -p:AssemblyVersion="${{ env.ASSEMBLY_VERSION }}"
    - name: Test
      run: |
        dotnet test --no-build --verbosity normal -p:CollectCoverage=true
    - name: Publish
      if: env.BRANCH == 'main'
      run: |
        SOURCE_ROOT=${SOURCE_ROOT:-"src"}
        for file in "$SOURCE_ROOT"/**/bin/Release/*.nupkg; do
          dotnet nuget push "$file" --source github --skip-duplicate --api-key ${{ secrets.GITHUB_TOKEN }}
        done
